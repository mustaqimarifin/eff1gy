generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "relationJoins"]
}

datasource db {
  provider = "sqlite"
  url      = env("TURSO_URL")
}



model Account {
  id                String @id 
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  sessionToken String   @id @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id 
  createdAt     DateTime  @default(now())
  name          String?
  image         String?
  email         String?   @unique
  pendingEmail  String?
  role          String    @default("USER")
  isAdmin       Boolean   @default(false)
  emailVerified DateTime?

  description String?
  location    String?
  username    String?    @unique
  accounts    Account[]
  posts       Post[]
  cases       Case[]
  comments    Comment[]
  blogs       Blog[]
  questions   Question[]
  reactions   Reaction[]
  sessions    Session[]
  stacks      Stack[]   
  bookmark    Bookmark[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Bookmark {
  id            String     @id
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  url           String?    @unique
  host          String?
  title         String?
  image         String?
  description   String?
  twitterHandle String?
  author        User?      @relation(fields: [twitterHandle], references: [username])
  faviconUrl    String?
  comments      Comment[]
  reactions     Reaction[]
  tags          Tag[]      
  count         Int        @default(1)

  @@index([host])
  @@index([id, count])
}

model Question {
  id          String     @id 
  status      String    @default("PENDING")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  title       String?
  plays       Int?       @default(0)
  waveform    Bytes?   
  audioUrl    String?
  description String?
  answer      String?
  userId      String?
  comments    Comment[]
  author      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  reactions   Reaction[]
  count       Int        @default(1)

  @@index([userId, status])
  @@index([id, count])
}

model Comment {
  id         String    @id 
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  text       String
  userId     String?
  bookmarkId String?
  questionId String?
  stackId    String?
  parentId   String?
  parent     Comment?  @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  replies    Comment[] @relation("ParentChild")
  bookmark   Bookmark? @relation(fields: [bookmarkId], references: [id], onDelete: Cascade)

  question Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
  stack    Stack?    @relation(fields: [stackId], references: [id], onDelete: Cascade)
  author   User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  blog     Blog?     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId   String?
  post     Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   String?
  event    Event?    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId  String?
  case     Case?     @relation(fields: [caseId], references: [id], onDelete: Cascade)
  caseId   String?

  @@index([bookmarkId, userId])
  @@index([questionId, userId])
  @@index([blogId, userId])
  @@index([stackId, userId])
  @@index([eventId, userId])
  @@index([caseId, userId])
  @@index([postId, userId])
}

model Blog {
  id        String     @id 
  slug      String?    @unique
  title     String?
  date      DateTime   @default(now())
  comments  Comment[]
  reactions Reaction[]
  author    User?      @relation(fields: [userId], references: [id])
  userId    String?
  count     Int        @default(1)

  @@index([slug, count])
}

model Event {
  id        String     @id 
  count     Int        @default(1)
  comments  Comment[]
  reactions Reaction[]
}

model Case {
  id        String     @id 
  slug      String?    @unique
  title     String?
  date      DateTime   @default(now())
  comments  Comment[]
  reactions Reaction[]
  author    User?      @relation(fields: [userId], references: [id])
  userId    String?
  count     Int        @default(1)

  @@index([slug, count])
}

model Tag {
  id        String    @id 
  name      String     @unique
  bookmarks Bookmark[] 
  stacks    Stack[]    
}

model Stack {
  id          String     @id 
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  name        String?
  slug        String?    @unique
  description String?
  image       String?
  url         String?
  comments    Comment[]
  reactions   Reaction[]
  tags        Tag[]     
  users       User[]    
  count       Int        @default(1)

  @@index([slug, count])
}

model Reaction {
  id String @id 
  createdAt  DateTime  @default(now())
  userId     String?
  bookmarkId String?
  questionId String?
  stackId    String?
  postId     String?
  blogId     String?
  bookmark   Bookmark? @relation(fields: [bookmarkId], references: [id], onDelete: Cascade)
  post       Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  question   Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
  stack      Stack?    @relation(fields: [stackId], references: [id], onDelete: Cascade)
  user       User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  blog       Blog?     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  slug       String?

  event   Event?  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String?
  case    Case?   @relation(fields: [caseId], references: [id], onDelete: Cascade)
  caseId  String?

  @@index([bookmarkId, userId])
  @@index([questionId, userId])
  @@index([blogId, userId])
  @@index([postId, userId])
  @@index([eventId, userId])
  @@index([caseId, userId])
  @@index([stackId, userId])
}

model Post {
  id    String @id
  count Int?   @default(1)

  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  publishedAt  DateTime?
  slug         String     @unique
  title        String
  text         String
  excerpt      String
  featureImage String?
  userId       String
  comments     Comment[]
  author       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  history      PostEdit[]
  reactions    Reaction[]

  @@index([publishedAt])
  @@index([userId])
}

model PostEdit {
  id String @id 
  createdAt    DateTime @default(now())
  text         String
  title        String
  excerpt      String
  featureImage String?
  postId       String?
  post         Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
}